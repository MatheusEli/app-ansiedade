{"version":3,"sources":["webpack:///node_modules/class-transformer/ClassTransformer.js","webpack:///node_modules/class-transformer/TransformOperationExecutor.js","webpack:///node_modules/class-transformer/decorators.js","webpack:///node_modules/class-transformer/enums/index.js","webpack:///node_modules/class-transformer/enums/transformation-type.enum.js","webpack:///node_modules/class-transformer/index.js","webpack:///node_modules/class-transformer/metadata/ExcludeMetadata.js","webpack:///node_modules/class-transformer/metadata/ExposeExcludeOptions.js","webpack:///node_modules/class-transformer/metadata/ExposeMetadata.js","webpack:///node_modules/class-transformer/metadata/MetadataStorage.js","webpack:///node_modules/class-transformer/metadata/TransformMetadata.js","webpack:///node_modules/class-transformer/metadata/TypeMetadata.js","webpack:///node_modules/class-transformer/storage.js","webpack:///src/app/core/iservicefirebase.service.ts","webpack:///src/app/core/model.ts","webpack:///src/app/models/usuario.ts","webpack:///src/app/services/usuario.service.ts"],"names":["Object","defineProperty","exports","value","ClassTransformer","TransformOperationExecutor_1","enums_1","object","options","executor","TransformOperationExecutor","TransformationType","CLASS_TO_PLAIN","transform","undefined","plainObject","cls","plain","PLAIN_TO_CLASS","clsObject","CLASS_TO_CLASS","fromObject","JSON","stringify","classToPlain","json","jsonObject","parse","plainToClass","testForBuffer","storage_1","Buffer","isBuffer","_a","instantiateArrayType","arrayType","array","Set","transformationType","recursionStack","source","targetType","isMap","level","Array","isArray","newValue","forEach","subValue","index","subSource","enableCircularCheck","isCircular","realTargetType","discriminator","property","subTypes","find","subType","name","newObject","newType","typeFunction","keepDiscriminatorProperty","constructor","Map","add","push","String","Number","Boolean","Date","valueOf","from","keys","getKeys","key","valueKey","newValueKey","propertyName","ignoreDecorators","exposeMetadata","defaultMetadataStorage","findExposeMetadataByCustomName","findExposeMetadata","get","Function","type","isSubValueMap","metadata","findTypeMetadata","reflectedType","targetMaps","filter","map","target","properties","enableImplicitConversion","Reflect","getMetadata","prototype","getReflectedType","descriptor","getOwnPropertyDescriptor","set","transformKey","finalValue","applyCustomTransformations","obj","metadatas","findTransformMetadatas","version","checkVersion","since","until","groups","length","checkGroups","transformFn","has","meta","strategy","getStrategy","exposedProperties","getExposedProperties","excludeExtraneousValues","concat","excludedProperties","getExcludedProperties","includes","excludePrefixes","every","prefix","substr","self","indexOf","decision","some","optionGroup","TransformPlainToClass","TransformClassToClass","TransformClassToPlain","Exclude","Expose","Type","Transform","ClassTransformer_1","TypeMetadata_1","ExposeMetadata_1","ExcludeMetadata_1","TransformMetadata_1","TransformMetadata","addTransformMetadata","TypeMetadata","addTypeMetadata","ExposeMetadata","addExposeMetadata","ExcludeMetadata","addExcludeMetadata","params","propertyKey","classTransformer","originalMethod","args","result","apply","isPromise","then","data","classToClass","classType","__createBinding","create","o","m","k","k2","enumerable","__exportStar","p","hasOwnProperty","deserializeArray","deserialize","serialize","classToClassFromExist","plainToClassFromExist","classToPlainFromExist","ClassTransformer_2","MetadataStorage","_typeMetadatas","_transformMetadatas","_exposeMetadatas","_excludeMetadatas","_ancestorsMap","findMetadatas","toClassOnly","toPlainOnly","findMetadata","getExposedMetadatas","excludeMap","exclude","exposeMap","expose","getExcludedMetadatas","clear","metadataFromTargetMap","metadataFromTarget","values","metadataFromAncestors","getAncestors","ancestor","ancestorMetadataMap","metadataFromAncestor","ancestorResult","metadataFromAncestorsTarget","slice","reverse","ancestors","baseClass","getPrototypeOf","MetadataStorage_1","ServiceFirebase","firestore","path","ref","collection","id","doc","pipe","snapshot","docToClass","snapshotDoc","typed","valueChanges","item","toObject","res","Model","Usuario","UsuarioService","providedIn"],"mappings":"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","file":"default~cadastro-cadastro-module~forum-forum-module~perfil-perfil-module-es5.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ClassTransformer = void 0;\nconst TransformOperationExecutor_1 = require(\"./TransformOperationExecutor\");\nconst enums_1 = require(\"./enums\");\nclass ClassTransformer {\n    classToPlain(object, options) {\n        const executor = new TransformOperationExecutor_1.TransformOperationExecutor(enums_1.TransformationType.CLASS_TO_PLAIN, options || {});\n        return executor.transform(undefined, object, undefined, undefined, undefined, undefined);\n    }\n    classToPlainFromExist(object, plainObject, options) {\n        const executor = new TransformOperationExecutor_1.TransformOperationExecutor(enums_1.TransformationType.CLASS_TO_PLAIN, options || {});\n        return executor.transform(plainObject, object, undefined, undefined, undefined, undefined);\n    }\n    plainToClass(cls, plain, options) {\n        const executor = new TransformOperationExecutor_1.TransformOperationExecutor(enums_1.TransformationType.PLAIN_TO_CLASS, options || {});\n        return executor.transform(undefined, plain, cls, undefined, undefined, undefined);\n    }\n    plainToClassFromExist(clsObject, plain, options) {\n        const executor = new TransformOperationExecutor_1.TransformOperationExecutor(enums_1.TransformationType.PLAIN_TO_CLASS, options || {});\n        return executor.transform(clsObject, plain, undefined, undefined, undefined, undefined);\n    }\n    classToClass(object, options) {\n        const executor = new TransformOperationExecutor_1.TransformOperationExecutor(enums_1.TransformationType.CLASS_TO_CLASS, options || {});\n        return executor.transform(undefined, object, undefined, undefined, undefined, undefined);\n    }\n    classToClassFromExist(object, fromObject, options) {\n        const executor = new TransformOperationExecutor_1.TransformOperationExecutor(enums_1.TransformationType.CLASS_TO_CLASS, options || {});\n        return executor.transform(fromObject, object, undefined, undefined, undefined, undefined);\n    }\n    serialize(object, options) {\n        return JSON.stringify(this.classToPlain(object, options));\n    }\n    /**\n     * Deserializes given JSON string to a object of the given class.\n     */\n    deserialize(cls, json, options) {\n        const jsonObject = JSON.parse(json);\n        return this.plainToClass(cls, jsonObject, options);\n    }\n    /**\n     * Deserializes given JSON string to an array of objects of the given class.\n     */\n    deserializeArray(cls, json, options) {\n        const jsonObject = JSON.parse(json);\n        return this.plainToClass(cls, jsonObject, options);\n    }\n}\nexports.ClassTransformer = ClassTransformer;\n//# sourceMappingURL=ClassTransformer.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransformOperationExecutor = exports.testForBuffer = void 0;\nconst storage_1 = require(\"./storage\");\nconst enums_1 = require(\"./enums\");\nfunction testForBuffer() {\n    try {\n        Buffer.isBuffer({\n        /* empty object */\n        });\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexports.testForBuffer = testForBuffer;\nfunction instantiateArrayType(arrayType) {\n    const array = new arrayType();\n    if (!(array instanceof Set) && !('push' in array)) {\n        return [];\n    }\n    return array;\n}\nclass TransformOperationExecutor {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(transformationType, options) {\n        this.transformationType = transformationType;\n        this.options = options;\n        // -------------------------------------------------------------------------\n        // Private Properties\n        // -------------------------------------------------------------------------\n        this.recursionStack = new Set();\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    transform(source, value, targetType, arrayType, isMap, level = 0) {\n        if (Array.isArray(value) || value instanceof Set) {\n            const newValue = arrayType && this.transformationType === enums_1.TransformationType.PLAIN_TO_CLASS\n                ? instantiateArrayType(arrayType)\n                : [];\n            value.forEach((subValue, index) => {\n                const subSource = source ? source[index] : undefined;\n                if (!this.options.enableCircularCheck || !this.isCircular(subValue)) {\n                    let realTargetType;\n                    if (typeof targetType !== 'function' &&\n                        targetType &&\n                        targetType.options &&\n                        targetType.options.discriminator &&\n                        targetType.options.discriminator.property &&\n                        targetType.options.discriminator.subTypes) {\n                        if (this.transformationType === enums_1.TransformationType.PLAIN_TO_CLASS) {\n                            realTargetType = targetType.options.discriminator.subTypes.find(subType => subType.name === subValue[targetType.options.discriminator.property]);\n                            const options = { newObject: newValue, object: subValue, property: undefined };\n                            const newType = targetType.typeFunction(options);\n                            realTargetType === undefined ? (realTargetType = newType) : (realTargetType = realTargetType.value);\n                            if (!targetType.options.keepDiscriminatorProperty)\n                                delete subValue[targetType.options.discriminator.property];\n                        }\n                        if (this.transformationType === enums_1.TransformationType.CLASS_TO_CLASS) {\n                            realTargetType = subValue.constructor;\n                        }\n                        if (this.transformationType === enums_1.TransformationType.CLASS_TO_PLAIN) {\n                            subValue[targetType.options.discriminator.property] = targetType.options.discriminator.subTypes.find(subType => subType.value === subValue.constructor).name;\n                        }\n                    }\n                    else {\n                        realTargetType = targetType;\n                    }\n                    const value = this.transform(subSource, subValue, realTargetType, undefined, subValue instanceof Map, level + 1);\n                    if (newValue instanceof Set) {\n                        newValue.add(value);\n                    }\n                    else {\n                        newValue.push(value);\n                    }\n                }\n                else if (this.transformationType === enums_1.TransformationType.CLASS_TO_CLASS) {\n                    if (newValue instanceof Set) {\n                        newValue.add(subValue);\n                    }\n                    else {\n                        newValue.push(subValue);\n                    }\n                }\n            });\n            return newValue;\n        }\n        else if (targetType === String && !isMap) {\n            if (value === null || value === undefined)\n                return value;\n            return String(value);\n        }\n        else if (targetType === Number && !isMap) {\n            if (value === null || value === undefined)\n                return value;\n            return Number(value);\n        }\n        else if (targetType === Boolean && !isMap) {\n            if (value === null || value === undefined)\n                return value;\n            return Boolean(value);\n        }\n        else if ((targetType === Date || value instanceof Date) && !isMap) {\n            if (value instanceof Date) {\n                return new Date(value.valueOf());\n            }\n            if (value === null || value === undefined)\n                return value;\n            return new Date(value);\n        }\n        else if (testForBuffer() && (targetType === Buffer || value instanceof Buffer) && !isMap) {\n            if (value === null || value === undefined)\n                return value;\n            return Buffer.from(value);\n        }\n        else if (typeof value === 'object' && value !== null) {\n            // try to guess the type\n            if (!targetType && value.constructor !== Object /* && TransformationType === TransformationType.CLASS_TO_PLAIN*/)\n                targetType = value.constructor;\n            if (!targetType && source)\n                targetType = source.constructor;\n            if (this.options.enableCircularCheck) {\n                // add transformed type to prevent circular references\n                this.recursionStack.add(value);\n            }\n            const keys = this.getKeys(targetType, value);\n            let newValue = source ? source : {};\n            if (!source &&\n                (this.transformationType === enums_1.TransformationType.PLAIN_TO_CLASS ||\n                    this.transformationType === enums_1.TransformationType.CLASS_TO_CLASS)) {\n                if (isMap) {\n                    newValue = new Map();\n                }\n                else if (targetType) {\n                    newValue = new targetType();\n                }\n                else {\n                    newValue = {};\n                }\n            }\n            // traverse over keys\n            for (const key of keys) {\n                if (key === '__proto__' || key === 'constructor') {\n                    continue;\n                }\n                const valueKey = key;\n                let newValueKey = key, propertyName = key;\n                if (!this.options.ignoreDecorators && targetType) {\n                    if (this.transformationType === enums_1.TransformationType.PLAIN_TO_CLASS) {\n                        const exposeMetadata = storage_1.defaultMetadataStorage.findExposeMetadataByCustomName(targetType, key);\n                        if (exposeMetadata) {\n                            propertyName = exposeMetadata.propertyName;\n                            newValueKey = exposeMetadata.propertyName;\n                        }\n                    }\n                    else if (this.transformationType === enums_1.TransformationType.CLASS_TO_PLAIN ||\n                        this.transformationType === enums_1.TransformationType.CLASS_TO_CLASS) {\n                        const exposeMetadata = storage_1.defaultMetadataStorage.findExposeMetadata(targetType, key);\n                        if (exposeMetadata && exposeMetadata.options && exposeMetadata.options.name) {\n                            newValueKey = exposeMetadata.options.name;\n                        }\n                    }\n                }\n                // get a subvalue\n                let subValue = undefined;\n                if (value instanceof Map) {\n                    subValue = value.get(valueKey);\n                }\n                else if (value[valueKey] instanceof Function) {\n                    subValue = value[valueKey]();\n                }\n                else {\n                    subValue = value[valueKey];\n                }\n                // determine a type\n                let type = undefined, isSubValueMap = subValue instanceof Map;\n                if (targetType && isMap) {\n                    type = targetType;\n                }\n                else if (targetType) {\n                    const metadata = storage_1.defaultMetadataStorage.findTypeMetadata(targetType, propertyName);\n                    if (metadata) {\n                        const options = { newObject: newValue, object: value, property: propertyName };\n                        const newType = metadata.typeFunction ? metadata.typeFunction(options) : metadata.reflectedType;\n                        if (metadata.options &&\n                            metadata.options.discriminator &&\n                            metadata.options.discriminator.property &&\n                            metadata.options.discriminator.subTypes) {\n                            if (!(value[valueKey] instanceof Array)) {\n                                if (this.transformationType === enums_1.TransformationType.PLAIN_TO_CLASS) {\n                                    type = metadata.options.discriminator.subTypes.find(subType => {\n                                        if (subValue && metadata.options.discriminator.property in subValue) {\n                                            return subType.name === subValue[metadata.options.discriminator.property];\n                                        }\n                                    });\n                                    type === undefined ? (type = newType) : (type = type.value);\n                                    if (!metadata.options.keepDiscriminatorProperty) {\n                                        if (subValue && metadata.options.discriminator.property in subValue) {\n                                            delete subValue[metadata.options.discriminator.property];\n                                        }\n                                    }\n                                }\n                                if (this.transformationType === enums_1.TransformationType.CLASS_TO_CLASS) {\n                                    type = subValue.constructor;\n                                }\n                                if (this.transformationType === enums_1.TransformationType.CLASS_TO_PLAIN) {\n                                    subValue[metadata.options.discriminator.property] = metadata.options.discriminator.subTypes.find(subType => subType.value === subValue.constructor).name;\n                                }\n                            }\n                            else {\n                                type = metadata;\n                            }\n                        }\n                        else {\n                            type = newType;\n                        }\n                        isSubValueMap = isSubValueMap || metadata.reflectedType === Map;\n                    }\n                    else if (this.options.targetMaps) {\n                        // try to find a type in target maps\n                        this.options.targetMaps\n                            .filter(map => map.target === targetType && !!map.properties[propertyName])\n                            .forEach(map => (type = map.properties[propertyName]));\n                    }\n                    else if (this.options.enableImplicitConversion &&\n                        this.transformationType === enums_1.TransformationType.PLAIN_TO_CLASS) {\n                        // if we have no registererd type via the @Type() decorator then we check if we have any\n                        // type declarations in reflect-metadata (type declaration is emited only if some decorator is added to the property.)\n                        const reflectedType = Reflect.getMetadata('design:type', targetType.prototype, propertyName);\n                        if (reflectedType) {\n                            type = reflectedType;\n                        }\n                    }\n                }\n                // if value is an array try to get its custom array type\n                const arrayType = Array.isArray(value[valueKey])\n                    ? this.getReflectedType(targetType, propertyName)\n                    : undefined;\n                // const subValueKey = TransformationType === TransformationType.PLAIN_TO_CLASS && newKeyName ? newKeyName : key;\n                const subSource = source ? source[valueKey] : undefined;\n                // if its deserialization then type if required\n                // if we uncomment this types like string[] will not work\n                // if (this.transformationType === TransformationType.PLAIN_TO_CLASS && !type && subValue instanceof Object && !(subValue instanceof Date))\n                //     throw new Error(`Cannot determine type for ${(targetType as any).name }.${propertyName}, did you forget to specify a @Type?`);\n                // if newValue is a source object that has method that match newKeyName then skip it\n                if (newValue.constructor.prototype) {\n                    const descriptor = Object.getOwnPropertyDescriptor(newValue.constructor.prototype, newValueKey);\n                    if ((this.transformationType === enums_1.TransformationType.PLAIN_TO_CLASS ||\n                        this.transformationType === enums_1.TransformationType.CLASS_TO_CLASS) &&\n                        // eslint-disable-next-line @typescript-eslint/unbound-method\n                        ((descriptor && !descriptor.set) || newValue[newValueKey] instanceof Function))\n                        //  || TransformationType === TransformationType.CLASS_TO_CLASS\n                        continue;\n                }\n                if (!this.options.enableCircularCheck || !this.isCircular(subValue)) {\n                    const transformKey = this.transformationType === enums_1.TransformationType.PLAIN_TO_CLASS ? newValueKey : key;\n                    let finalValue;\n                    if (this.transformationType === enums_1.TransformationType.CLASS_TO_PLAIN) {\n                        // Get original value\n                        finalValue = value[transformKey];\n                        // Apply custom transformation\n                        finalValue = this.applyCustomTransformations(finalValue, targetType, transformKey, value, this.transformationType);\n                        // If nothing change, it means no custom transformation was applied, so use the subValue.\n                        finalValue = value[transformKey] === finalValue ? subValue : finalValue;\n                        // Apply the default transformation\n                        finalValue = this.transform(subSource, finalValue, type, arrayType, isSubValueMap, level + 1);\n                    }\n                    else {\n                        finalValue = this.transform(subSource, subValue, type, arrayType, isSubValueMap, level + 1);\n                        finalValue = this.applyCustomTransformations(finalValue, targetType, transformKey, value, this.transformationType);\n                    }\n                    if (newValue instanceof Map) {\n                        newValue.set(newValueKey, finalValue);\n                    }\n                    else {\n                        newValue[newValueKey] = finalValue;\n                    }\n                }\n                else if (this.transformationType === enums_1.TransformationType.CLASS_TO_CLASS) {\n                    let finalValue = subValue;\n                    finalValue = this.applyCustomTransformations(finalValue, targetType, key, value, this.transformationType);\n                    if (newValue instanceof Map) {\n                        newValue.set(newValueKey, finalValue);\n                    }\n                    else {\n                        newValue[newValueKey] = finalValue;\n                    }\n                }\n            }\n            if (this.options.enableCircularCheck) {\n                this.recursionStack.delete(value);\n            }\n            return newValue;\n        }\n        else {\n            return value;\n        }\n    }\n    applyCustomTransformations(value, target, key, obj, transformationType) {\n        let metadatas = storage_1.defaultMetadataStorage.findTransformMetadatas(target, key, this.transformationType);\n        // apply versioning options\n        if (this.options.version !== undefined) {\n            metadatas = metadatas.filter(metadata => {\n                if (!metadata.options)\n                    return true;\n                return this.checkVersion(metadata.options.since, metadata.options.until);\n            });\n        }\n        // apply grouping options\n        if (this.options.groups && this.options.groups.length) {\n            metadatas = metadatas.filter(metadata => {\n                if (!metadata.options)\n                    return true;\n                return this.checkGroups(metadata.options.groups);\n            });\n        }\n        else {\n            metadatas = metadatas.filter(metadata => {\n                return !metadata.options || !metadata.options.groups || !metadata.options.groups.length;\n            });\n        }\n        metadatas.forEach(metadata => {\n            value = metadata.transformFn(value, obj, transformationType);\n        });\n        return value;\n    }\n    // preventing circular references\n    isCircular(object) {\n        return this.recursionStack.has(object);\n    }\n    getReflectedType(target, propertyName) {\n        if (!target)\n            return undefined;\n        const meta = storage_1.defaultMetadataStorage.findTypeMetadata(target, propertyName);\n        return meta ? meta.reflectedType : undefined;\n    }\n    getKeys(target, object) {\n        // determine exclusion strategy\n        let strategy = storage_1.defaultMetadataStorage.getStrategy(target);\n        if (strategy === 'none')\n            strategy = this.options.strategy || 'exposeAll'; // exposeAll is default strategy\n        // get all keys that need to expose\n        let keys = [];\n        if (strategy === 'exposeAll') {\n            if (object instanceof Map) {\n                keys = Array.from(object.keys());\n            }\n            else {\n                keys = Object.keys(object);\n            }\n        }\n        if (!this.options.ignoreDecorators && target) {\n            // add all exposed to list of keys\n            let exposedProperties = storage_1.defaultMetadataStorage.getExposedProperties(target, this.transformationType);\n            if (this.transformationType === enums_1.TransformationType.PLAIN_TO_CLASS) {\n                exposedProperties = exposedProperties.map(key => {\n                    const exposeMetadata = storage_1.defaultMetadataStorage.findExposeMetadata(target, key);\n                    if (exposeMetadata && exposeMetadata.options && exposeMetadata.options.name) {\n                        return exposeMetadata.options.name;\n                    }\n                    return key;\n                });\n            }\n            if (this.options.excludeExtraneousValues) {\n                keys = exposedProperties;\n            }\n            else {\n                keys = keys.concat(exposedProperties);\n            }\n            // exclude excluded properties\n            const excludedProperties = storage_1.defaultMetadataStorage.getExcludedProperties(target, this.transformationType);\n            if (excludedProperties.length > 0) {\n                keys = keys.filter(key => {\n                    return !excludedProperties.includes(key);\n                });\n            }\n            // apply versioning options\n            if (this.options.version !== undefined) {\n                keys = keys.filter(key => {\n                    const exposeMetadata = storage_1.defaultMetadataStorage.findExposeMetadata(target, key);\n                    if (!exposeMetadata || !exposeMetadata.options)\n                        return true;\n                    return this.checkVersion(exposeMetadata.options.since, exposeMetadata.options.until);\n                });\n            }\n            // apply grouping options\n            if (this.options.groups && this.options.groups.length) {\n                keys = keys.filter(key => {\n                    const exposeMetadata = storage_1.defaultMetadataStorage.findExposeMetadata(target, key);\n                    if (!exposeMetadata || !exposeMetadata.options)\n                        return true;\n                    return this.checkGroups(exposeMetadata.options.groups);\n                });\n            }\n            else {\n                keys = keys.filter(key => {\n                    const exposeMetadata = storage_1.defaultMetadataStorage.findExposeMetadata(target, key);\n                    return (!exposeMetadata ||\n                        !exposeMetadata.options ||\n                        !exposeMetadata.options.groups ||\n                        !exposeMetadata.options.groups.length);\n                });\n            }\n        }\n        // exclude prefixed properties\n        if (this.options.excludePrefixes && this.options.excludePrefixes.length) {\n            keys = keys.filter(key => this.options.excludePrefixes.every(prefix => {\n                return key.substr(0, prefix.length) !== prefix;\n            }));\n        }\n        // make sure we have unique keys\n        keys = keys.filter((key, index, self) => {\n            return self.indexOf(key) === index;\n        });\n        return keys;\n    }\n    checkVersion(since, until) {\n        let decision = true;\n        if (decision && since)\n            decision = this.options.version >= since;\n        if (decision && until)\n            decision = this.options.version < until;\n        return decision;\n    }\n    checkGroups(groups) {\n        if (!groups)\n            return true;\n        return this.options.groups.some(optionGroup => groups.includes(optionGroup));\n    }\n}\nexports.TransformOperationExecutor = TransformOperationExecutor;\n//# sourceMappingURL=TransformOperationExecutor.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransformPlainToClass = exports.TransformClassToClass = exports.TransformClassToPlain = exports.Exclude = exports.Expose = exports.Type = exports.Transform = void 0;\nconst ClassTransformer_1 = require(\"./ClassTransformer\");\nconst storage_1 = require(\"./storage\");\nconst TypeMetadata_1 = require(\"./metadata/TypeMetadata\");\nconst ExposeMetadata_1 = require(\"./metadata/ExposeMetadata\");\nconst ExcludeMetadata_1 = require(\"./metadata/ExcludeMetadata\");\nconst TransformMetadata_1 = require(\"./metadata/TransformMetadata\");\n/**\n * Defines a custom logic for value transformation.\n */\nfunction Transform(transformFn, options) {\n    return function (target, key) {\n        const metadata = new TransformMetadata_1.TransformMetadata(target.constructor, key, transformFn, options);\n        storage_1.defaultMetadataStorage.addTransformMetadata(metadata);\n    };\n}\nexports.Transform = Transform;\n/**\n * Specifies a type of the property.\n * The given TypeFunction can return a constructor. A discriminator can be given in the options.\n */\nfunction Type(typeFunction, options) {\n    return function (target, key) {\n        const type = Reflect.getMetadata('design:type', target, key);\n        const metadata = new TypeMetadata_1.TypeMetadata(target.constructor, key, type, typeFunction, options);\n        storage_1.defaultMetadataStorage.addTypeMetadata(metadata);\n    };\n}\nexports.Type = Type;\n/**\n * Marks property as included in the process of transformation. By default it includes the property for both\n * constructorToPlain and plainToConstructor transformations, however you can specify on which of transformation types\n * you want to skip this property.\n */\nfunction Expose(options) {\n    return function (object, propertyName) {\n        const metadata = new ExposeMetadata_1.ExposeMetadata(object instanceof Function ? object : object.constructor, propertyName, options || {});\n        storage_1.defaultMetadataStorage.addExposeMetadata(metadata);\n    };\n}\nexports.Expose = Expose;\n/**\n * Marks property as excluded from the process of transformation. By default it excludes the property for both\n * constructorToPlain and plainToConstructor transformations, however you can specify on which of transformation types\n * you want to skip this property.\n */\nfunction Exclude(options) {\n    return function (object, propertyName) {\n        const metadata = new ExcludeMetadata_1.ExcludeMetadata(object instanceof Function ? object : object.constructor, propertyName, options || {});\n        storage_1.defaultMetadataStorage.addExcludeMetadata(metadata);\n    };\n}\nexports.Exclude = Exclude;\n/**\n * Transform the object from class to plain object and return only with the exposed properties.\n */\nfunction TransformClassToPlain(params) {\n    return function (target, propertyKey, descriptor) {\n        const classTransformer = new ClassTransformer_1.ClassTransformer();\n        const originalMethod = descriptor.value;\n        descriptor.value = function (...args) {\n            const result = originalMethod.apply(this, args);\n            const isPromise = !!result && (typeof result === 'object' || typeof result === 'function') && typeof result.then === 'function';\n            return isPromise\n                ? result.then((data) => classTransformer.classToPlain(data, params))\n                : classTransformer.classToPlain(result, params);\n        };\n    };\n}\nexports.TransformClassToPlain = TransformClassToPlain;\n/**\n * Return the class instance only with the exposed properties.\n */\nfunction TransformClassToClass(params) {\n    return function (target, propertyKey, descriptor) {\n        const classTransformer = new ClassTransformer_1.ClassTransformer();\n        const originalMethod = descriptor.value;\n        descriptor.value = function (...args) {\n            const result = originalMethod.apply(this, args);\n            const isPromise = !!result && (typeof result === 'object' || typeof result === 'function') && typeof result.then === 'function';\n            return isPromise\n                ? result.then((data) => classTransformer.classToClass(data, params))\n                : classTransformer.classToClass(result, params);\n        };\n    };\n}\nexports.TransformClassToClass = TransformClassToClass;\n/**\n * Return the class instance only with the exposed properties.\n */\nfunction TransformPlainToClass(classType, params) {\n    return function (target, propertyKey, descriptor) {\n        const classTransformer = new ClassTransformer_1.ClassTransformer();\n        const originalMethod = descriptor.value;\n        descriptor.value = function (...args) {\n            const result = originalMethod.apply(this, args);\n            const isPromise = !!result && (typeof result === 'object' || typeof result === 'function') && typeof result.then === 'function';\n            return isPromise\n                ? result.then((data) => classTransformer.plainToClass(classType, data, params))\n                : classTransformer.plainToClass(classType, result, params);\n        };\n    };\n}\nexports.TransformPlainToClass = TransformPlainToClass;\n//# sourceMappingURL=decorators.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./transformation-type.enum\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransformationType = void 0;\nvar TransformationType;\n(function (TransformationType) {\n    TransformationType[TransformationType[\"PLAIN_TO_CLASS\"] = 0] = \"PLAIN_TO_CLASS\";\n    TransformationType[TransformationType[\"CLASS_TO_PLAIN\"] = 1] = \"CLASS_TO_PLAIN\";\n    TransformationType[TransformationType[\"CLASS_TO_CLASS\"] = 2] = \"CLASS_TO_CLASS\";\n})(TransformationType = exports.TransformationType || (exports.TransformationType = {}));\n//# sourceMappingURL=transformation-type.enum.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransformationType = exports.deserializeArray = exports.deserialize = exports.serialize = exports.classToClassFromExist = exports.classToClass = exports.plainToClassFromExist = exports.plainToClass = exports.classToPlainFromExist = exports.classToPlain = void 0;\nconst ClassTransformer_1 = require(\"./ClassTransformer\");\nvar ClassTransformer_2 = require(\"./ClassTransformer\");\nObject.defineProperty(exports, \"ClassTransformer\", { enumerable: true, get: function () { return ClassTransformer_2.ClassTransformer; } });\n__exportStar(require(\"./metadata/ExposeExcludeOptions\"), exports);\n__exportStar(require(\"./decorators\"), exports);\nconst classTransformer = new ClassTransformer_1.ClassTransformer();\nfunction classToPlain(object, options) {\n    return classTransformer.classToPlain(object, options);\n}\nexports.classToPlain = classToPlain;\nfunction classToPlainFromExist(object, plainObject, options) {\n    return classTransformer.classToPlainFromExist(object, plainObject, options);\n}\nexports.classToPlainFromExist = classToPlainFromExist;\nfunction plainToClass(cls, plain, options) {\n    return classTransformer.plainToClass(cls, plain, options);\n}\nexports.plainToClass = plainToClass;\nfunction plainToClassFromExist(clsObject, plain, options) {\n    return classTransformer.plainToClassFromExist(clsObject, plain, options);\n}\nexports.plainToClassFromExist = plainToClassFromExist;\nfunction classToClass(object, options) {\n    return classTransformer.classToClass(object, options);\n}\nexports.classToClass = classToClass;\nfunction classToClassFromExist(object, fromObject, options) {\n    return classTransformer.classToClassFromExist(object, fromObject, options);\n}\nexports.classToClassFromExist = classToClassFromExist;\nfunction serialize(object, options) {\n    return classTransformer.serialize(object, options);\n}\nexports.serialize = serialize;\n/**\n * Deserializes given JSON string to a object of the given class.\n */\nfunction deserialize(cls, json, options) {\n    return classTransformer.deserialize(cls, json, options);\n}\nexports.deserialize = deserialize;\n/**\n * Deserializes given JSON string to an array of objects of the given class.\n */\nfunction deserializeArray(cls, json, options) {\n    return classTransformer.deserializeArray(cls, json, options);\n}\nexports.deserializeArray = deserializeArray;\n/**\n * Enum representing the different transformation types.\n */\nvar TransformationType;\n(function (TransformationType) {\n    TransformationType[TransformationType[\"PLAIN_TO_CLASS\"] = 0] = \"PLAIN_TO_CLASS\";\n    TransformationType[TransformationType[\"CLASS_TO_PLAIN\"] = 1] = \"CLASS_TO_PLAIN\";\n    TransformationType[TransformationType[\"CLASS_TO_CLASS\"] = 2] = \"CLASS_TO_CLASS\";\n})(TransformationType = exports.TransformationType || (exports.TransformationType = {}));\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExcludeMetadata = void 0;\nclass ExcludeMetadata {\n    constructor(target, propertyName, options) {\n        this.target = target;\n        this.propertyName = propertyName;\n        this.options = options;\n    }\n}\nexports.ExcludeMetadata = ExcludeMetadata;\n//# sourceMappingURL=ExcludeMetadata.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=ExposeExcludeOptions.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExposeMetadata = void 0;\nclass ExposeMetadata {\n    constructor(target, propertyName, options) {\n        this.target = target;\n        this.propertyName = propertyName;\n        this.options = options;\n    }\n}\nexports.ExposeMetadata = ExposeMetadata;\n//# sourceMappingURL=ExposeMetadata.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MetadataStorage = void 0;\nconst enums_1 = require(\"../enums\");\n/**\n * Storage all library metadata.\n */\nclass MetadataStorage {\n    constructor() {\n        // -------------------------------------------------------------------------\n        // Properties\n        // -------------------------------------------------------------------------\n        this._typeMetadatas = new Map();\n        this._transformMetadatas = new Map();\n        this._exposeMetadatas = new Map();\n        this._excludeMetadatas = new Map();\n        this._ancestorsMap = new Map();\n    }\n    // -------------------------------------------------------------------------\n    // Adder Methods\n    // -------------------------------------------------------------------------\n    addTypeMetadata(metadata) {\n        if (!this._typeMetadatas.has(metadata.target)) {\n            this._typeMetadatas.set(metadata.target, new Map());\n        }\n        this._typeMetadatas.get(metadata.target).set(metadata.propertyName, metadata);\n    }\n    addTransformMetadata(metadata) {\n        if (!this._transformMetadatas.has(metadata.target)) {\n            this._transformMetadatas.set(metadata.target, new Map());\n        }\n        if (!this._transformMetadatas.get(metadata.target).has(metadata.propertyName)) {\n            this._transformMetadatas.get(metadata.target).set(metadata.propertyName, []);\n        }\n        this._transformMetadatas.get(metadata.target).get(metadata.propertyName).push(metadata);\n    }\n    addExposeMetadata(metadata) {\n        if (!this._exposeMetadatas.has(metadata.target)) {\n            this._exposeMetadatas.set(metadata.target, new Map());\n        }\n        this._exposeMetadatas.get(metadata.target).set(metadata.propertyName, metadata);\n    }\n    addExcludeMetadata(metadata) {\n        if (!this._excludeMetadatas.has(metadata.target)) {\n            this._excludeMetadatas.set(metadata.target, new Map());\n        }\n        this._excludeMetadatas.get(metadata.target).set(metadata.propertyName, metadata);\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    findTransformMetadatas(target, propertyName, transformationType) {\n        return this.findMetadatas(this._transformMetadatas, target, propertyName).filter(metadata => {\n            if (!metadata.options)\n                return true;\n            if (metadata.options.toClassOnly === true && metadata.options.toPlainOnly === true)\n                return true;\n            if (metadata.options.toClassOnly === true) {\n                return (transformationType === enums_1.TransformationType.CLASS_TO_CLASS ||\n                    transformationType === enums_1.TransformationType.PLAIN_TO_CLASS);\n            }\n            if (metadata.options.toPlainOnly === true) {\n                return transformationType === enums_1.TransformationType.CLASS_TO_PLAIN;\n            }\n            return true;\n        });\n    }\n    findExcludeMetadata(target, propertyName) {\n        return this.findMetadata(this._excludeMetadatas, target, propertyName);\n    }\n    findExposeMetadata(target, propertyName) {\n        return this.findMetadata(this._exposeMetadatas, target, propertyName);\n    }\n    findExposeMetadataByCustomName(target, name) {\n        return this.getExposedMetadatas(target).find(metadata => {\n            return metadata.options && metadata.options.name === name;\n        });\n    }\n    findTypeMetadata(target, propertyName) {\n        return this.findMetadata(this._typeMetadatas, target, propertyName);\n    }\n    getStrategy(target) {\n        const excludeMap = this._excludeMetadatas.get(target);\n        const exclude = excludeMap && excludeMap.get(undefined);\n        const exposeMap = this._exposeMetadatas.get(target);\n        const expose = exposeMap && exposeMap.get(undefined);\n        if ((exclude && expose) || (!exclude && !expose))\n            return 'none';\n        return exclude ? 'excludeAll' : 'exposeAll';\n    }\n    getExposedMetadatas(target) {\n        return this.getMetadata(this._exposeMetadatas, target);\n    }\n    getExcludedMetadatas(target) {\n        return this.getMetadata(this._excludeMetadatas, target);\n    }\n    getExposedProperties(target, transformationType) {\n        return this.getExposedMetadatas(target)\n            .filter(metadata => {\n            if (!metadata.options)\n                return true;\n            if (metadata.options.toClassOnly === true && metadata.options.toPlainOnly === true)\n                return true;\n            if (metadata.options.toClassOnly === true) {\n                return (transformationType === enums_1.TransformationType.CLASS_TO_CLASS ||\n                    transformationType === enums_1.TransformationType.PLAIN_TO_CLASS);\n            }\n            if (metadata.options.toPlainOnly === true) {\n                return transformationType === enums_1.TransformationType.CLASS_TO_PLAIN;\n            }\n            return true;\n        })\n            .map(metadata => metadata.propertyName);\n    }\n    getExcludedProperties(target, transformationType) {\n        return this.getExcludedMetadatas(target)\n            .filter(metadata => {\n            if (!metadata.options)\n                return true;\n            if (metadata.options.toClassOnly === true && metadata.options.toPlainOnly === true)\n                return true;\n            if (metadata.options.toClassOnly === true) {\n                return (transformationType === enums_1.TransformationType.CLASS_TO_CLASS ||\n                    transformationType === enums_1.TransformationType.PLAIN_TO_CLASS);\n            }\n            if (metadata.options.toPlainOnly === true) {\n                return transformationType === enums_1.TransformationType.CLASS_TO_PLAIN;\n            }\n            return true;\n        })\n            .map(metadata => metadata.propertyName);\n    }\n    clear() {\n        this._typeMetadatas.clear();\n        this._exposeMetadatas.clear();\n        this._excludeMetadatas.clear();\n        this._ancestorsMap.clear();\n    }\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n    getMetadata(metadatas, target) {\n        const metadataFromTargetMap = metadatas.get(target);\n        let metadataFromTarget;\n        if (metadataFromTargetMap) {\n            metadataFromTarget = Array.from(metadataFromTargetMap.values()).filter(meta => meta.propertyName !== undefined);\n        }\n        const metadataFromAncestors = [];\n        for (const ancestor of this.getAncestors(target)) {\n            const ancestorMetadataMap = metadatas.get(ancestor);\n            if (ancestorMetadataMap) {\n                const metadataFromAncestor = Array.from(ancestorMetadataMap.values()).filter(meta => meta.propertyName !== undefined);\n                metadataFromAncestors.push(...metadataFromAncestor);\n            }\n        }\n        return metadataFromAncestors.concat(metadataFromTarget || []);\n    }\n    findMetadata(metadatas, target, propertyName) {\n        const metadataFromTargetMap = metadatas.get(target);\n        if (metadataFromTargetMap) {\n            const metadataFromTarget = metadataFromTargetMap.get(propertyName);\n            if (metadataFromTarget) {\n                return metadataFromTarget;\n            }\n        }\n        for (const ancestor of this.getAncestors(target)) {\n            const ancestorMetadataMap = metadatas.get(ancestor);\n            if (ancestorMetadataMap) {\n                const ancestorResult = ancestorMetadataMap.get(propertyName);\n                if (ancestorResult) {\n                    return ancestorResult;\n                }\n            }\n        }\n        return undefined;\n    }\n    findMetadatas(metadatas, target, propertyName) {\n        const metadataFromTargetMap = metadatas.get(target);\n        let metadataFromTarget;\n        if (metadataFromTargetMap) {\n            metadataFromTarget = metadataFromTargetMap.get(propertyName);\n        }\n        const metadataFromAncestorsTarget = [];\n        for (const ancestor of this.getAncestors(target)) {\n            const ancestorMetadataMap = metadatas.get(ancestor);\n            if (ancestorMetadataMap) {\n                if (ancestorMetadataMap.has(propertyName)) {\n                    metadataFromAncestorsTarget.push(...ancestorMetadataMap.get(propertyName));\n                }\n            }\n        }\n        return metadataFromAncestorsTarget\n            .slice()\n            .reverse()\n            .concat((metadataFromTarget || []).slice().reverse());\n    }\n    getAncestors(target) {\n        if (!target)\n            return [];\n        if (!this._ancestorsMap.has(target)) {\n            const ancestors = [];\n            for (let baseClass = Object.getPrototypeOf(target.prototype.constructor); typeof baseClass.prototype !== 'undefined'; baseClass = Object.getPrototypeOf(baseClass.prototype.constructor)) {\n                ancestors.push(baseClass);\n            }\n            this._ancestorsMap.set(target, ancestors);\n        }\n        return this._ancestorsMap.get(target);\n    }\n}\nexports.MetadataStorage = MetadataStorage;\n//# sourceMappingURL=MetadataStorage.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransformMetadata = void 0;\nclass TransformMetadata {\n    constructor(target, propertyName, transformFn, options) {\n        this.target = target;\n        this.propertyName = propertyName;\n        this.transformFn = transformFn;\n        this.options = options;\n    }\n}\nexports.TransformMetadata = TransformMetadata;\n//# sourceMappingURL=TransformMetadata.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TypeMetadata = void 0;\nclass TypeMetadata {\n    constructor(target, propertyName, reflectedType, typeFunction, options) {\n        this.target = target;\n        this.propertyName = propertyName;\n        this.reflectedType = reflectedType;\n        this.typeFunction = typeFunction;\n        this.options = options;\n    }\n}\nexports.TypeMetadata = TypeMetadata;\n//# sourceMappingURL=TypeMetadata.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defaultMetadataStorage = void 0;\nconst MetadataStorage_1 = require(\"./metadata/MetadataStorage\");\n/**\n * Default metadata storage is used as singleton and can be used to storage all metadatas.\n */\nexports.defaultMetadataStorage = new MetadataStorage_1.MetadataStorage();\n//# sourceMappingURL=storage.js.map","import { AngularFirestore, AngularFirestoreCollection } from '@angular/fire/firestore';\r\nimport { plainToClass } from 'class-transformer';\r\nimport { Observable } from 'rxjs';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { Post } from '../models/post';\r\nimport { PostService } from '../services/post.service';\r\nimport { ICrud } from './icrud.interface';\r\nimport { Model } from './model';\r\n\r\nexport abstract class ServiceFirebase<T extends Model> implements ICrud<T>{\r\n\r\n    ref: AngularFirestoreCollection<T>;\r\n\r\n    constructor(protected type: { new(): T; }, protected firestore:\r\n        AngularFirestore, public path: string) {\r\n        this.ref = this.firestore.collection<T>(this.path);\r\n    }\r\n\r\n    get(id: string): Observable<T> {\r\n        let doc = this.ref.doc<T>(id);\r\n        return doc.get().pipe(map(snapshot => this.docToClass(snapshot)));\r\n      }\r\n    \r\n\r\n    docToClass(snapshotDoc): T {\r\n        let obj = {\r\n            id: snapshotDoc.id,\r\n            ...(snapshotDoc.data() as T)\r\n        }\r\n        let typed = plainToClass(this.type, obj)\r\n        return typed;\r\n    }\r\n\r\n    list(): Observable<T[]> {\r\n        return this.ref.valueChanges();\r\n    }\r\n\r\n    createOrUpdate(item: T): Promise<any> {\r\n        let id = item.id;\r\n        if (!item)\r\n            return\r\n        let obj = null;\r\n\r\n        if (item instanceof this.type)\r\n            obj = item.toObject();\r\n        else\r\n            obj = item;\r\n        if (id) {\r\n            return this.ref.doc(id).set(obj);\r\n        }\r\n        else\r\n            return this.ref.add(obj).then(res => {\r\n                obj.id = res.id; // Para salvar com o atributo id\r\n                this.ref.doc(res.id).set(obj);\r\n            })\r\n    }\r\n\r\n    delete(id: string): Promise<void> {\r\n        return this.ref.doc(id).delete();\r\n    }\r\n\r\n\r\n}    ","import { classToPlain } from \"class-transformer\";\r\nexport abstract class Model {\r\n    id: string;\r\n    toObject(): object {\r\n        let obj: any = classToPlain(this); //realiza a desserialização para uma classe literal\r\n        delete obj.id;\r\n        return obj;\r\n    }\r\n}","\r\nimport { Url } from 'url';\r\nimport { Model } from '../core/model';\r\nimport { ListaPosts } from './lista-posts';\r\n\r\nexport class Usuario extends Model {\r\n    nome: string;\r\n    profissao: string;\r\n    sexo:string;\r\n    idade:number;\r\n    email:string;\r\n    posts:ListaPosts;\r\n    foto:Url;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AngularFirestore } from '@angular/fire/firestore';\r\nimport { ServiceFirebase } from '../core/iservicefirebase.service';\r\nimport { Usuario } from '../models/usuario';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UsuarioService extends\tServiceFirebase<Usuario>\t{\r\n\t\tconstructor(firestore:\tAngularFirestore)\t{\r\n\t\t\t\tsuper(Usuario,\tfirestore,\t'usuarios');\r\n\t\t}\r\n\r\n}\r\n"]}